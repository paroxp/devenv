#!/usr/bin/env bash

# set 'TAB:menu-complete'
set show-all-if-ambiguous on
set completion-ignore-case on
bind '"\e[A": history-search-backward'
bind '"\eOA": history-previous-history'
bind '"\e[B": history-search-forward'
bind '"\eOB": history-next-history'

bold="\[$(tput bold)\]"
black="\[$(tput setaf 0)\]"
red="\[$(tput setaf 1)\]"
green="\[$(tput setaf 2)\]"
yellow="\[$(tput setaf 3)\]"
blue="\[$(tput setaf 4)\]"
purple="\[$(tput setaf 5)\]"
cyan="\[$(tput setaf 6)\]"
white="\[$(tput setaf 7)\]"
reset="\[$(tput sgr0)\]"

function return_status() {
  RETVAL=$?
  if [ $RETVAL -ne 0 ]; then
    echo "${red}→${reset}"
  else
    echo "${green}→${reset}"
  fi
}

function git_dirty_check() {
  BRANCH="${1}"
  status="$(git status 2>&1 | tee)"
  staged="$(git diff --stat --cached | wc -l)"
  unstaged="$(git diff --stat | wc -l)"
  stashed="$(git stash list | wc -l)"
  behind="$(git rev-list --left-right --count origin/${BRANCH}..${BRANCH} 2> /dev/null | awk '{print $1}')"
  ahead="$(git rev-list --left-right --count origin/${BRANCH}..${BRANCH} 2> /dev/null | awk '{print $2}')"
  bits=''

  if [ "${ahead}" -gt "0" ]; then
    bits="${purple}▲ ${ahead}${reset} ${bits}"
  fi
  if [ "${behind}" -gt "0" ]; then
    bits="${purple}▼ ${behind}${reset} ${bits}"
  fi
  if [ "${stashed}" -gt "0" ]; then
    bits="${blue}⚑ $((stashed - 1))${reset} ${bits}"
  fi
  if [ "${staged}" -gt "0" ]; then
    bits="${yellow}● $((staged - 1))${reset} ${bits}"
  fi
  if [ "${unstaged}" -gt "0" ]; then
    bits="${red}✖ $((unstaged - 1))${reset} ${bits}"
  fi

  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo " ${green}✔${reset}"
  fi
}

function git_branch() {
  BRANCH="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
  if [ ! "${BRANCH}" == "" ]; then
    STAT="$(git_dirty_check ${BRANCH})"
    echo "on git:${cyan}${BRANCH}${reset}${STAT}"
  else
    echo ""
  fi
}

set_bash_prompt(){
  PS1="\n[\t] ${blue}#${reset} ${yellow}\w${reset} $(git_branch)\n$(return_status) "
}

PROMPT_COMMAND=set_bash_prompt
