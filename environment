#!/usr/bin/env bash

ACTION=$1
DEBUG=0
WORKING_DIR=$HOME

ERROR=`tput setaf 1`
SUCCESS=`tput setaf 2`
WARNING=`tput setaf 3`
INFO=`tput setaf 4`
RESET=`tput sgr0`

# Debug the application, sometimes.
function debug {
	if [ $DEBUG -eq 1 ]; then
		MSG=$1
		echo "`tput setab 3``tput setaf 0`[DEBUG] ${MSG}${RESET}"
	fi
}

# Print out an error message.
function error {
	MSG=$1
	echo "${ERROR}${MSG}${RESET}"
}

# Print out an info message.
function info {
	MSG=$1
	echo "${INFO}${MSG}${RESET}"
}

# Print out a success message.
function success {
	MSG=$1
	echo "${SUCCESS}${MSG}${RESET}"
}

# Print out a warning message.
function warning {
	MSG=$1
	echo "${WARNING}${MSG}${RESET}"
}

# Check if the application is installed in the system.
function check_application {
	NAME=$1
	APP=$2

	debug "Checking application: ${NAME}"

	if hash $APP 2>/dev/null; then
		debug "${NAME} installed."
		return
	else
		debug "${NAME} not installed."
		error "Please install ${NAME} on your system."
		exit 1
	fi
}

# Check for the dependencies.
function check_dependencies {
	info "Checking for dependencies."

	check_application Git git
	check_application Vim vim
	check_application "Z Shell" zsh
	check_directory $WORKING_DIR/.oh-my-zsh "Please make sure you've installed 'oh-my-zsh'."

	success "All good."
}

# Check if the directory exist.
function check_directory {
	DIRECTORY=$1
	MSG=$2

	debug "Checking directory: ${DIRECTORY}"

	if [ -d "$DIRECTORY" ]; then
		debug "${DIRECTORY} exists."
		return
	else
		debug "${DIRECTORY} does not exist."

		if [ -z "$MSG" ]; then
			debug "Custom MSG not set."
			error "Please make sure '${DIRECTORY}' exists."
		else
			debug "Custom MSG set."
			error "$MSG"
		fi
		exit 1
	fi
}

# Configure terminator.
function config_terminator {
	info "Configuring Terminator"

	cp -rf ./config.terminator $WORKING_DIR/.config/terminator/config || exit 1

	info "Terminator has been configured. You may need to restart Terminator."
}

# Initialise the environment for the developer.
function init {
	info "Initialising environment."
	check_dependencies

	info "Copying files..."

	cp -rf ./.zshrc $WORKING_DIR/.zshrc || exit 1
	cp -rf ./.vimrc $WORKING_DIR/.vimrc || exit 1
	cp -rf ./.aliases $WORKING_DIR/.aliases || exit 1
	cp -Rf ./.devenv $WORKING_DIR/ || exit 1
	cp -rf ./.custom $WORKING_DIR/.custom || exit 1
	cp -rf ./.exports $WORKING_DIR/.exports || exit 1
	cp -rf ./.oh-my-zsh/themes/honukai.zsh-theme $WORKING_DIR/.oh-my-zsh/themes/honukai.zsh-theme || exit 1

	success "Your environment has been initialised."
}

# List the functionality covered by this application.
function list {
	echo -e "Display the list of functionality supported by DevEnv.\n"

	echo -e "list\tLists any functionality covered by this application."
	echo -e "init\tInitialises the developer environment. ${WARNING}This will override any existing setup!${RESET}"
	echo -e "terminator\tSet's up the template for the terminator console."
	echo -e "update\tUpdates the most important files with the new ones. ${WARNING}This will override important files.${RESET}"
}

# Target zsh and load it's configuration.
function load_config {
	zsh
	source $WORKING_DIR/.zshrc
}

# Update the environment for the developer.
function update {
	info "Updating environment."
	check_dependencies

	info "Copying important files..."

	cp -rf ./.zshrc $WORKING_DIR/.zshrc || exit 1
	cp -rf ./.vimrc $WORKING_DIR/.vimrc || exit 1
	cp -rf ./.aliases $WORKING_DIR/.aliases || exit 1
	cp -Rn ./.devenv $WORKING_DIR/ || exit 1
	cp -n ./.custom $WORKING_DIR/.custom
	cp -n ./.exports $WORKING_DIR/.exports
	cp -rf ./.oh-my-zsh/themes/honukai.zsh-theme $WORKING_DIR/.oh-my-zsh/themes/honukai.zsh-theme || exit 1

	success "Your environment has been updated."
}

################################

case $ACTION in
	init ) init; load_config;;
	terminator ) config_terminator; load_config;;
	update ) update; load_config;;
	* ) list;
esac

