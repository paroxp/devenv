#!/usr/bin/env bash

ACTION=$1

ERROR=`tput setaf 1`
SUCCESS=`tput setaf 2`
WARNING=`tput setaf 3`
INFO=`tput setaf 4`
RESET=`tput sgr0`

WORKING_DIR=./tmp

# Print out an error message.
function error {
	MSG=$1
	echo "${ERROR}${MSG}${RESET}"
}

# Print out an info message.
function info {
	MSG=$1
	echo "${INFO}${MSG}${RESET}"
}

# Print out a success message.
function success {
	MSG=$1
	echo "${SUCCESS}${MSG}${RESET}"
}

# Check if the application is installed in the system.
function check_application {
	NAME=$1
	APP=$2

	if hash $APP 2>/dev/null; then
		return
	else
		error "Please install ${NAME} on your system."
		exit 1
	fi
}

# Check for the dependencies.
function check_dependencies {
	info "Checking for dependencies."

	check_application Git git
	check_application Vim vim
	check_application "Z Shell" zsh
	check_directory $WORKING_DIR/.oh-my-zsh "Please make sure you've installed 'oh-my-zsh'."

	success "All good."
}

# Check if the directory exist.
function check_directory {
	DIRECTORY=$1
	MSG=$2

	if [ -d "$DIRECTORY" ]; then
		return
	else
		if [ -z "$MSG" ]; then
			error "Please make sure '${DIRECTORY}' exists."
		else
			error "$MSG"
		fi
		exit 1
	fi
}

# Copy the file from A to B.
function copy {
	SRC=$1
	DIST=$2
	FLAGS=$3

	info "Copying ${SRC}."

	if [ -z "$FLAGS" ] && [ $FLAGS == *"O"* ]; then
		cp ${SRC} ${DIST}
	else
		if [ -e "$DIST" ]; then
			return
		else
			cp ${SRC} ${DIST}
		fi
	fi
}

# Initialise the environment for the developer.
function init {
	info "Initialising environment."
	check_dependencies

	# copy 
	# Override .vimrc
	# Override .aliases.rp
	# Override .alias
	# Override .custom.rp
	# Override .exports.rp
	# Override .oh-my-zsh/themes/honukai.zsh-theme
}

# List the functionality covered by this application.
function list {
	echo -e "Display the list of functionality supported by DevEnv.\n"

	echo -e "list\tLists any functionality covered by this application."
	echo -e "init\tInitialises the developer environment. ${WARNING}This will override any existing setup!${RESET}"
	echo -e "update\tUpdates the most important files with the new ones. ${WARNING}This will override important files.${RESET}"
}

# Update the environment for the developer.
function update {
	info "Updating environment."
	check_dependencies


}

###############################

case $ACTION in
	init ) init; break;;
	update ) update; break;;
	* ) list;
esac

